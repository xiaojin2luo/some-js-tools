if (window.confirm("如果您同意使用本程序，您将自行承担全部后果，与程序创作者无关，同意请点击确定继续！")) {
    // 
} else {
    window.location.reload();
}

// 自动识别验证码类
class AutoDaMa {
    constructor() {
        // 
    }

    // 二值化函数
    toHex(oringinImageData, newImageData) {
        let length = oringinImageData.length,
            pixGrey = 0,
            pixGreyAvg = 0;
        // 计算平均灰度值
        for (let i = 0; i < length; i += 4) {
            pixGrey += oringinImageData[i] * 0.3 + oringinImageData[i + 1] * 0.59 + oringinImageData[i + 2] * 0.11;
        }
        pixGreyAvg = pixGrey / (length / 4);
        for (let j = 0; j < length; j = j + 4) {
            pixGrey = oringinImageData[j] * 0.333 + oringinImageData[j + 1] * 0.333 + oringinImageData[j + 2] * 0.333;
            pixGrey = pixGrey > pixGreyAvg ? 255 : 0;
            newImageData[j] = pixGrey;
            newImageData[j + 1] = pixGrey;
            newImageData[j + 2] = pixGrey;
            newImageData[j + 3] = 255;
        }
        return newImageData;
    }


    // 去除蓝色的线条
    dealBlueLine(oringinImageData, newImageData) {
        let length = oringinImageData.length,
            pixGrey = 0,
            pixGreyAvg = 0;

        // 计算图像总灰度
        for (let i = 0; i < length; i += 4) {
            pixGrey += oringinImageData[i] * 0.3 + oringinImageData[i + 1] * 0.59 + oringinImageData[i + 2] * 0.11;
        }
        // 计算图像平均灰度值
        pixGreyAvg = pixGrey / (length / 4);
        // console.log(pixGreyAvg);
        // 去除
        for (let j = 0; j < length; j = j + 4) {
            pixGrey = oringinImageData[j] * 0.333 + oringinImageData[j + 1] * 0.333 + oringinImageData[j + 2] * 0.333;
            if (oringinImageData[j + 2] > oringinImageData[j + 1] || oringinImageData[j + 2] > oringinImageData[j]) {
                pixGrey = 255;
            } else {
                pixGrey = pixGrey > pixGreyAvg ? 255 : 0;
            }
            newImageData[j] = pixGrey;
            newImageData[j + 1] = pixGrey;
            newImageData[j + 2] = pixGrey;
            newImageData[j + 3] = 255;
        }
        // return oringinImageData;
        return newImageData;
    }

    // 二值化结果转二维数组
    hex2Xy(imageData, width, height) {
        // console.log(imageData);
        let xyArray = new Array(height);
        // 行循环
        for (let y = 0; y < height; y++) {
            // 列循环
            xyArray[y] = new Array(width);
            for (let x = 0, dataWidth = 4 * width, widthIndex = 0; widthIndex < dataWidth; x++, widthIndex += 4) {
                let r = imageData[y * dataWidth + widthIndex],
                    g = imageData[y * dataWidth + widthIndex + 1],
                    b = imageData[y * dataWidth + widthIndex + 2];
                xyArray[y][x] = (r + g + b) > 500 ? 0 : 1;
            }
        }
        return xyArray;
    }

    // 二维数组转二值化
    xy2Hex(data, canvasContext) {
        let height = data.length,
            width = data[0].length,
            imageData = canvasContext.createImageData(width, height),
            newData = imageData.data,
            pixGrey = 0;
        for (let i = 0; i < height; i++) {
            for (let j = 0, dataWidth = 4 * width, dataIndex = 0; dataIndex < dataWidth; j++, dataIndex += 4) {
                pixGrey = data[i][j] == 1 ? 0 : 255;
                newData[i * dataWidth + dataIndex] = pixGrey;
                newData[i * dataWidth + dataIndex + 1] = pixGrey;
                newData[i * dataWidth + dataIndex + 2] = pixGrey;
                newData[i * dataWidth + dataIndex + 3] = 255;
            }
        }
        return imageData;
    }

    // 腐蚀
    corrode(xyArray) {
        for (let y = 1, length = xyArray.length - 1; y < length; y++) {
            for (let x = 1, width = xyArray[0].length - 1; x < width; x++) {
                if (xyArray[y][x] == 1 && xyArray[y][x + 1] + xyArray[y + 1][x] + xyArray[y - 1][x] + xyArray[y][x - 1] == 0) {
                    xyArray[y][x] = 0;
                }
            }
        }
        return xyArray;
    }

    // 膨胀
    expand(xyArray) {
        for (let y = 1, length = xyArray.length - 1; y < length; y++) {
            for (let x = 1, width = xyArray[0].length - 1; x < width; x++) {
                if (xyArray[y][x] == 0 && xyArray[y][x + 1] + xyArray[y + 1][x] + xyArray[y - 1][x] + xyArray[y][x - 1] == 4) {
                    xyArray[y][x] = 1;
                }
            }
        }
        return xyArray;
    }

    // 纵向切割前后白边
    // 横向切割上下白边
    splitY(xyArray) {
        let sumY = 0,
            spliceIndex = [],
            spliceCount = 0;
        // 数组 【行】【列】
        for (let y = 0, height = xyArray.length; y < height; y++) {
            let sumY = 0;
            let flag = 0;
            for (let x = 0, width = xyArray[0].length; x < width; x++) {
                sumY += xyArray[y][x];
            }
            // 将需要切丢的列的索引添加进数组
            if (sumY === 0) spliceIndex.push(y);
            // console.log(sumY);
        }
        // console.log(spliceIndex);
        // 切丢不需要的白边
        for (let index = 0; index < spliceIndex.length; index++) {
            xyArray.splice(spliceIndex[index] - spliceCount, 1);
            spliceCount++;
        }
        return xyArray;
    }

    speclialSplitY(xyArray) {
        let sumY = 0,
            spliceIndex = [],
            spliceCount = 0;
        // 数组 【行】【列】
        for (let y = 0, height = xyArray.length; y < height; y++) {
            let sumY = 0;
            for (let x = 0, width = xyArray[0].length; x < width; x++) {
                sumY += xyArray[y][x];
            }
            // console.log(sumY);
            if (sumY < 4) spliceIndex.push(y);
        }
        // console.log(spliceIndex);
        for (let index = 0; index < spliceIndex.length; index++) {
            xyArray.splice(spliceIndex[index] - spliceCount, 1);
            spliceCount++;
        }
        // xyArray.pop();
        // xyArray.pop();
        return xyArray;
    }

    // 转置XY坐标
    Xy2Yx(xyArray) {
        // 高 纵坐标 0-33
        let height = xyArray.length,
            // 宽 横坐标 0-79
            width = xyArray[0].length,
            tmpArray = new Array(width);
        for (let x = 0; x < width; x++) {
            tmpArray[x] = new Array(height);
            for (let y = 0; y < height; y++) {
                tmpArray[x][y] = xyArray[y][x];
            }
        }
        return tmpArray;
    }

    // 重新计算图像大小并生成数据
    reComputImageSize(xyArray, canvasContext) {
        let height = xyArray.length,
            width = xyArray[0].length;
        // 二维数组二值化
        hexData = this.xy2Hex(xyArray, canvasContext);
        // 重新计算图像大小
        newImageData = canvasContext.createImageData(width, height);
        for (let index = 0; index < newImageData.data.length; index++) {
            newImageData.data[index] = hexData.data[index];
        }
        return newImageData;
    }

    // 切割字符 16 14 16
    spliceChar(xyArray) {
        xyArray = this.Xy2Yx(xyArray);
        let chars = [],
            char = [],
            length = Math.floor(xyArray.length);
        // 第一个字
        for (let i = 0; i < length * 0.25 - 1; i++) {
            char.push(xyArray[i]);
        };

        chars.push(this.speclialSplitY(this.Xy2Yx(char)));
        char = [];
        // 第二个字
        for (let i = Math.floor(length * 0.25) - 1; i < length * 0.5 - 1; i++) {
            char.push(xyArray[i]);
        };

        chars.push(this.speclialSplitY(this.Xy2Yx(char)));
        char = [];
        // 第三个字
        for (let i = Math.floor(length * 0.5) - 1; i < length * 0.75 - 2; i++) {
            char.push(xyArray[i]);
        };
        chars.push(this.speclialSplitY(this.Xy2Yx(char)));
        char = [];
        // 第四个字
        for (let i = Math.floor(length * 0.75) - 1; i < length; i++) {
            char.push(xyArray[i]);
        };
        chars.push(this.speclialSplitY(this.Xy2Yx(char)));
        return chars;
    }
    // 计算列上点的数目
    computePointsInRow(xyArray) {
        let point = 0,
            points = [];
        // 数组 【行】【列】
        // x 列 0-79 横坐标
        // y 行  0-33 纵坐标
        for (let y = 0, height = xyArray.length; y < height; y++) {
            point = 0;
            for (let x = 0, width = xyArray[0].length; x < width; x++) {
                point += xyArray[y][x];
            }
            points.push(point);
        }
        return points;
    }

    // 更具字符串比较相似度
    compareSimlerByStr(charStr, dictStr) {
        // console.log(dictStr);
        let length = charStr.length > dictStr.length ? dictStr.length : charStr.length,
            simler = 0;
        for (let i = 0; i < length; i++) {
            if ((charStr[i] == dictStr[i])) simler++;
        }
        return simler / length;
    }

    // 二维数组转化为特征值字符串
    xyArray2Str(xyArray) {
        let str = '';
        for (let y = 0; y < xyArray.length; y++) {
            for (let x = 0; x < xyArray[0].length; x++) {
                if (xyArray[y][x] != 0) {
                    str += '+';
                } else {
                    str += '-';
                }
            }
        }
        return str;
    }

    // 识别字符
    identifyChar(char) {
        // let dict = localStorage.getItem('dict');
        // if (!dict) {
        //     console.error('dict not exist!');
        //     return false;
        // }
        // dict = JSON.parse(dict);

        let similer = [],
            charIndex = 0,
            maxSimiler = 0;

        let dict = [
            {
                key: '0',
                value: '----++++++-----++++++++---++++++++++-++++----+++-++++----+++++++------++++++------++++++------++++++------++++++------++++++------++++++-----+++++++-----+++++++-----+++-++++--+++++--+++++++++----+++++++--'
            }, {
                key: '2',
                value: '--+++++++++----+++++++++++---++++++++++++------++--+++++----------++++----------++++---------+++++---------+++++--------+++++--------++++++-------++++++------+++++++---++-+++++++----++++++++------+++++++-------+++++++++++++--+++++++++++++----+++++++++-'
            }, {
                key: '3',
                value: '---+++++++--------+++++++++++------+++++++++++-----------++++++-----------++++++----------++++++----------++++------------++++------+++++++++------+++++++++----+---++++++++----+-------+++++---+--------++++---+++------++++---+++++++++++++---++++++++++++------+++++++++-----'
            }, {
                key: '4',
                value: '--------++++++-------+++++++------++++++++-----+++++++++----+++++-++++---+++++--++++--+++++---++++-++++----+++++++++-----++++-+++------++++-++++++++-++++-++++++++++++++-+++++++++++++--------++++++--------++++-+--------++++-+--------++++--'
            }, {
                key: '5',
                value: '-----+++++++++------+++++++++++-+---+++++++++++-++-++++---------++-++++---------++-+++++++++----+--++++++++++-------++++++++++------------+++++------------++++-------------+++++-----------+++++----------+++++++---------++++--++++-----+++++--+++++++++++++----+++++++++++--------++++++-----'
            }, {
                key: '6',
                value: '+------++++++--+----+++++++++-----+++++++++++---+++++---++++--+++++----------++++---------++++++--+++----+++++++++++++--++++++++++++++-++++++---+++++-+++++-----++++++++++------++++-++++------++++-++++-----++++---++++---+++++----+++++++++++-----+++++++++-------++++++----'
            }, {
                key: '8',
                value: '+---+++++------+--++++++++++--+-++++++++++++-+++++++--+++++++++++-----++++++++++-------++++-++++------+++---+++++--+++++---+++++++++++--+++++++++++---+++++---+++++--++++-----++++++++++------+++++++++-------+++++++++-----+++++-+++++++++++++---++++++++++++----++++++++++--'
            }, {
                key: '9',
                value: '----++++--------++++++++-----++++++++++---+++++---++++--++++-----++++-++++-----++++-++++------+++-++++-----++++-+++++----++++-++++++++++++++-+++++++-++++----++++--++++---------++++----------++++--++----+++++---+++++++++++---++++++++++-----+++++++------'
            }, {
                key: '1',
                value: '-----+++++++-------++++++++-----------++++-----------++++-----------++++-----------++++-----------++++----------++++-----------++++-----------++++----+------++++----++-----++++----++-----++++---------++++++-------+++++++-------+++++++++++-+---++++++++++++------+-+++++-+'
            }, {
                key: '7',
                value: '--+++++------+++++++++++--++++++++++-------+++++--------++++-----++++-----++++-------+++++-------++++-------++++--------'
            }, {
                key: '0',
                value: '------+++++-------++++++++-----++++++++++----++++---+++++-++++-----++++-++++-----++++++++------+++++++++-----++++++++------++++++++------++++++++------++++++++------+++-++++-----++++--+++-----++++--++++---+++++---++++++++++-----++++++++-------+++++----'
            }, {
                key: '0',
                value: '------++++-------++++++++----++++++++++--+++++--++++-+++++-----++-++++------++-++++------++++++-------++++++-------++++++-------++++++-------++++++-------++++++-------++-+++------+++-++++----++++--+++++++++++---+++++++++-----+++++++--'
            }, {
                key: '0',
                value: '------++++---------++++++++---+--++++++++++--+-+++++--+++++-++++++-----+++++++++------+++++++++------++++++++-------++++++++-------++++++++-------++++++++-------++++++++-------++++++++-------++++-+++------++++--++++----+++++--++++++++++++----++++++++++-------+++++++----'
            }, {
                key: '0',
                value: '--------+++++-------++++++++----++++++++++--++++----++++-++++------+-++++---------++++---------++++-----+---++++-----++--++++-----+++-++++-----++++++++-----++++++++-----++++++++-----++++-+++++--++++---++++++++++----++++++++-------++++'
            }, {
                key: '1',
                value: '--++++++-----++++++++-----+++++++--------++++--------++++--------++++--------++++--------++++--------++++--------++++--------++++--------++++-------++++--------++++-----++-++++----+++++++++++--+++++++++++---+++++++++'
            }, {
                key: '1',
                value: '++++------------++++-----------++++------------++++--+++------+++++++++++----+++++++++++----+++++--++++----++++---++++---+++++---++++---+++++---++++---++++----++++---++++---++++---++++----++++---+++-----++++---++------++++-----------++++-----------++++----------+++++-------+++++++-------+++++++++++-----+++++++++++---------+++++-'
            }, {
                key: '1',
                value: '---+++++++-----++++++++---------++++---------++++---------++++---------++++---------++++--------++++---------++++---------++++---------++++---------++++---------++++--------+++++----++++++++-----+++++++++++---+++++++++++-----+-+++++--'
            }, {
                key: '1',
                value: '--++++++-----++++++++-----+++++++--------++++--------++++--------++++--+-----++++--+----++++---+----++++---+----++++---+----++++---+----++++---+----++++---+----++++---+---++++-----+++++++-----++++++++++---++++++++++-'
            }, {
                key: '1',
                value: '--+++++++---++++++++----+++++++-------++++------++++-------++++-------+++++------++++-------++++-------++++-------++++-------++++------+++++------++++----++++++++---++++++++++--++++++++++'
            }, {
                key: '1',
                value: '+------+++-----+----+++++++---+---++++++++-----------++++-----------++++-----------++++-----------++++-----------++++----------++++----++-----++++----++-----++++----+------++++-----------++++-----------++++----+-----+++++-------+++++++-------+++++++++++-----++++++++++++--------+++++--'
            }, {
                key: '2',
                value: '++-++++++++----+++++++++++++--++++++++++++++-+++++-----++++++++--------+++++++--------+++++++--------+++++++--------+++++++-------++++++++------+++++-+++----+++++++-+-----+++++++------++++++++------+++++++-------++++++++------++++++++++-----+++++++++++++-'
            }, {
                key: '8',
                value: '+----++++++++--++--+++++++++++++-+++++++++++++++++++-----+++++-++++------++++-++++------+++--+++++-----++----+++++++++++----++++++++++++--+++++++++++++-+++++----++++++++++-----+++++-++++-------+++-++++------+++--+++++-----+++---++++++++++++----+++++++++++------++++++++-'
            }, {
                key: '2',
                value: '---++++++++-----++++++++++----+++++++++++----------+++++----------++++----------++++----------++++----------+++++--------++++++------++++++++-----++++++------+++++++------+++++++-----++++++++-----+++++++-------++++++++++++--+++++++++++++----++++++++++-'
            }, {
                key: '2',
                value: '--+++++++++---+++++++++++--++++++++++++---------++++---------++++--------+++++-------++++++------++++++-----+++++++-----+++++++----+++++++-----+++++++------++++++++++++--++++++++++++----++++++++-'
            }, {
                key: '2',
                value: '----++++++-------++++++++++----+++++++++++----++---+++++----------++++--------++++++------+++++++------+++++++-----++++++++-----+++++++------++++++++------++++++++++++---++++++++++++--------+++++-'
            }, {
                key: '2',
                value: '----+++++++++----++++++++++++--+++++++++++++---------+++++----------+++++---------+++++---------+++++--------++++++-------+++++++------++++++++-----+++++++++---+++++++-++--+++++++++-++-+++++++----+-+++++++-------++++++++++++---+++++++++++------++++++++'
            }, {
                key: '2',
                value: '-++++++++------++++++++++-----+++++++++++-----------+++++-----------++++-----------++++-----------++++-----------++++----------+++++--------++++++---+----+++++++------+++++++-------+++++++-------+++++++--------+++++----------++++++++++-----+++++++++++-----++++++++++----'
            }, {
                key: '2',
                value: '--++++++------+++++++++-----+++++++++---------+++++---------++++---------++++---------++++--------++++--------++++-------++++--------++++-------+++++-------++++---------++++---------++++++++-----+++++++++-----+++++++++-------+++++++++'
            }, {
                key: '3',
                value: '---+++++++++---+++++++++++---++++++++++---------++++-----++++++++----+++++++++-----++++++++---------++++-++++----++++-++++++++++++--+++++++++++----++++++--+'
            }, {
                key: '3',
                value: '+--++++++------+-+++++++++-------+++++++++--+--------+++++-----------++++-----------++++--+-------++++---+--++++++++----+-+++++++------+--+++++++-----+------++++----+-------++++----++-----++++----+++++++++++-----+++++++++-------+++++++-----'
            }, {
                key: '3',
                value: '----+++++++------++++++++++-----++++++++++----------++++-----+++++++++----+++++++++------++++++++----------+++++----------++++-++--------+++++++------++++++++++++++++++-++++++++++++----+++++++++--'
            }, {
                key: '3',
                value: '---+++++++-----++++++++++----++++++++++---------++++---------++++--+++++++++++--+++++++++----++++++++++----++---+++++---------++++---------++++++++-----+++++++++++++++++-+++++++++++----+++++++---'
            }, {
                key: '4',
                value: '------++++++--------+++++++------++++++++-----+++++++++----++++-+++++---++++--++++---++++---++++--++++----++++--+++-----++++--++------++++--++++++++++++--++++++++++++++-+++++++++++++-------++++++--------++++----------++++---'
            }, {
                key: '4',
                value: '---------+++++--------+++++++------++++++++-----+++++++++----++++-+++++---++++--+++++--+++++--++++--+++++---++++--++++----++++-+++++----++++-+++--++--++++-+++++++++++++++++++++++++++----++++++++++---------+++++---------++++----------++++-'
            }, {
                key: '4',
                value: '+-------+++++++------++++++++----+++++++++---++++++++++--++++++++++--++++--+++++-++++---+++--++++----+++-++++-----+++++++------+++++++++++++++++++++++++++++++-+++++++++++--------+++++--------++++---------++++'
            }, {
                key: '4',
                value: '-------++++---------+++++--------+++++++------++++++++-----++--++++++--+++---++++---+++----++++---++----+++++---+-----++++----++++++++++----+++++++++++---++++++++++++-+------+++++---------++++---------++++----------+++++---------++++-----'
            }, {
                key: '4',
                value: '--------+++++-------++++++------++++++------++-++++-----++--++++----++---++++---++----++++--++-----++++-+++-----++++-+++++++++++++-++++++++++++---++++++++++-------++++---------++++---------++++---------++++--'
            }, {
                key: '5',
                value: '----++++++------++++++++++---++++++++++---++++---+++---++++---------++++++-------+++++++++-----+++++++++--------+++++-+++------+++-++++++++++++--+++++++++++---+++++++++-'
            }, {
                key: '5',
                value: '---+++++++----++++++++++--++++++++++--++------++-++++++------++++++++-----++++++++--------+++++--------++++---------++++--------++++-------++++--++---+++++-+++++++++++--+++++++++-----+++++----'
            }, {
                key: '5',
                value: '---+++++++++++--+--++++++++++++-++-+++++++++++--++-++++---------++-++++---------++-+++++++++----++-+++++++++++--++--+++++++++++-+---------+++++-+----------++++------------+++++------------++++-----------++++-----------+++++---++++---++++++---++++++++++++--+-+++++++++++---------+++++-----'
            }, {
                key: '5',
                value: '+----+++++++------++++++++++----++++++++++----++++--+-++----++++--+---+--+++++++++--++-++++++++++-++--++++++++++++----+---++++++---------+++++----------+++----------+++--+++-----++++--++++++++++++---+++++++++++-----+++++++--'
            }, {
                key: '5',
                value: '---+++++++------+++++++++++-+-+++++++++++++-++++----+++---++++---------++++++++------++++++++++-----++++++++++----------+++++----------++++-----------++++----------++++----------++++---------++++-+++-----+++++-+++++++++++++-++++++++++++-----+++++++----'
            }, {
                key: '5',
                value: '--++++++++++---++++++++++++-++++++++++-++++---------++++---------++++---------++++++++-----++-+++++++---++--+++++++--++-----+++++-++------++++-++------++++-+-------++++-+-------++++---++--++++++---+++++++++-----+++++++-------++++-----'
            }, {
                key: '5',
                value: '++--+++++++++--++-+++++++++++----+++++++++++---++++-----------++++-----------+++++++++------++++++++++---+--++++++++++--+--------+++++-++--------++++-++---------+++++----------+++++---------++++++---------++++-++++-----+++++-+++++++++++++---+++++++++++-++----++++++---++'
            }, {
                key: '5',
                value: '---+++++++++---+++++++++++--+++++++++++-++++------++-++++---------+++++++++----++++++++++----++++++++++---------+++++---------++++---------++++---------+++++++-----++++++++++++++++++-++++++++++-----++++++----'
            }, {
                key: '6',
                value: '------+++++------+++++++++---++++++++++--+++++---+++-+++++--------++++--------+++++--+++---++++++++++++-++++++++++++++++++---+++++++++-----++++++++------+++++++------+++++++-----++++-++++----++++--+++++++++++---+++++++++-----++++++---'
            }, {
                key: '6',
                value: '------++++-------++++++++---+++++++++++-+++++++++++++++++------+-++++---------++++++++++---+++++++++++++++++++++++++++++-----++++++++------+++++++------+++++++------+++++++------++++++++----+++++-++++++++++++--+++++++++++----+++++--++'
            }, {
                key: '6',
                value: '-------++++++--------++++++++++-----++++++++++++---+++++-----++---++++------------+++++----------+++++++++++-----++++++++++++----+++++++++++++--++++++----+++++-+++++------++++-+++++-------++++-++++-------++++-++++------++++---++++----+++++----++++++++++++-----+++++++++---------++++++----'
            }, {
                key: '6',
                value: '------+++++++-----++++++++++---+++++++++++--+++++-----++-++++----------++++---------+++++++++++---++++++++++++--+++++++++++++-+++++----+++++++++------++++++++-------+++++++-------+++++++------++++-++++----+++++--++++++++++++---+++++++++-+-----++++++--+'
            }, {
                key: '6',
                value: '+------+++++++++----+++++++++++--++++++++++++-+++++-----+++-++++------+++++++-------++-++++--++++++--+++++++++++---++++++++++++--++++-----++++-++++-----++++-++++-----+++++++++-----+++++++++-----++++--++++---+++++---+++++++++++----++++++++--------++++--'
            }, {
                key: '7',
                value: '+++++++-----++++++++++++-+++++++++++-------+++++--------++++-------+++++-------++++-------+++++------+++++-------++++-------+++++------+++++-------++++-------+++++------+++++-------++++-------+++++-------++++--------'
            }, {
                key: '7',
                value: '--++++++-----+++++++++++--++++++++++--------++++----++++-------++++-------++++-------++++--------++++-------++++--------'
            }, {
                key: '7',
                value: '+++++++++++++--+--+++++++++++-----++++++++++-+--------+++---++-------+++---++------+++----++-----+++-----++----++++-----++----+++------++---+++-------++--++++-------+--++++-------+---++++-------+--++++--------+'
            }, {
                key: '7',
                value: '---+++++++-------+++++++++++-----+++++++++++-----------++++-----++++----------++++-----------++++-------+--++++-----------++++----------++++----------++++-----------'
            }, {
                key: '7',
                value: '--++++++++++---++++++++++++--+++++++++++---------+++++-------++++++-------++++++------+++++++-----+++++-++-----++++--++----+++++--++----++++---+----+++++---+---+++++--------++++----+---+++++----+--+++++-----+--+++++-----+---+++------+'
            }, {
                key: '8',
                value: '-----+++++++-----+++++++++----+++++++++---+++++--++++--++++---++++--+++++-+++++---++++++++++----+++++++-+---++++++++-+--+++++++++++-++++--++++++-++++---++++-++++-----+++-+++++----+++--+++++--++++--+++++++++++---++++++++++------++++---'
            }, {
                key: '8',
                value: '+----++++++++--++--+++++++++++++-+++++++++++++++++++-----+++++-++++------++++-++++------+++--+++++-----++----+++++++++++----++++++++++++--+++++++++++++-+++++----++++++++++-----+++++-++++-------+++-++++------+++--+++++-----+++---++++++++++++----+++++++++++------++++++++-'
            }, {
                key: '8',
                value: '-++++++++---+++++++++++-+++++++++++++++-----+++++++------++++++------+++++++-----++++++++++++++++++++++++++-+++++++++++-+++----++++++++-----+++++++------+++++------++++++++----+++++++++++++++++++++++++++---++++++++--'
            }, {
                key: '8',
                value: '----++++++++---+-++++++++++++-+++++++++++++++++++++-----+++++++++-------+++++++++------++++++++++-----++++++++++++++++++--++++++++++++--+++++++++++++--++++-----+++++-++++------++++-+++++------+++-+++++-----++++-++++++---+++++--+++++++++++++---+++++++++++------+++++++---'
            }, {
                key: '8',
                value: '-----+++++----+---++++++++++++-+++++++++++++++++++--++++++++++------++++++++-------+++-++++------+++--+++++--+++++--+++++++++++++++++++++++-++++++---++++++++++------++++++++-------++-++++-------++-+++++-----+++--++++++++++++---+++++++++++----++++++++++'
            }, {
                key: '8',
                value: '--++++++-------+++++++++++----++++++++++++---++++---++++++--+++------+++++-+++-------++++-++++-----+++++--++++++++++++--++++++++++++---++++++++++-----+++----++++----++------++++---++-------++++--++-------++++--+++-----++++---++++++++++++---+++++++++++------++++++++-----'
            }, {
                key: '9',
                value: '------++++++------++++++++----+++++++++---+++++----++--++++------+-++++-------++++++-------++-++++------++-+++++----++---++++++++++----+++++++++-----+++++++---++-----+++---++++++++++----+++++++++-----++++++--'
            }, {
                key: '9',
                value: '----++++-----+-++++++++---+++++++++++--+++++---++++-++++-----++++++++-----++++++++------+++++++-----+++++++++----+++++++++++++++++-+++++++-++++---+++++-++++--------++++---------++++-++----+++++--+++++++++++---+++++++++-----++++++-----'
            }, {
                key: '9',
                value: '----++++------++++++++---++++++++++-+++++---++++++++-----+++++++-----+++++++------++++++-----++++++++----+++++++++++++++-+++++++-+++---++++--+++--------++++--------++++++----++++++++++++++++++-+++++++++-+--++++++----'
            }, {
                key: '9',
                value: '-----++++++--------++++++++++-----++++++++++++----++++-----++++--+++++------+++--++++-------++++-++++-------++++-+++++------++++--+++++----++++++++++++++++++++++--+++++++++++++------++++++++++-----------++++-----------+++++---+++----+++++----+++++++++++------+++++++++---------+++++------'
            }, {
                key: '0',
                value: '------+++++-------++++++++-----++++++++++----++++---+++++-++++-----++++-++++-----++++++++------+++++++++-----++++++++------++++++++------++++++++------++++++++------+++-++++-----++++--+++-----++++--++++---+++++---++++++++++-----++++++++-------+++++----'
            }, {
                key: '0',
                value: '------++++-------++++++++----++++++++++--+++++--++++-+++++-----++-++++------++-++++------++++++-------++++++-------++++++-------++++++-------++++++-------++++++-------++-+++------+++-++++----++++--+++++++++++---+++++++++-----+++++++--'
            }, {
                key: '1',
                value: '--++++++-----++++++++-----+++++++--------++++--------++++--------++++--------++++--------++++--------++++--------++++--------++++--------++++-------++++--------++++-----++-++++----+++++++++++--+++++++++++---+++++++++'
            }, {
                key: '1',
                value: '---+++++++-----++++++++---------++++---------++++---------++++---------++++---------++++--------++++---------++++---------++++---------++++---------++++---------++++--------+++++----++++++++-----+++++++++++---+++++++++++-----+-+++++--'
            }, {
                key: '1',
                value: '--++++++-----++++++++-----+++++++--------++++--------++++--------++++--+-----++++--+----++++---+----++++---+----++++---+----++++---+----++++---+----++++---+----++++---+---++++-----+++++++-----++++++++++---++++++++++-'
            }, {
                key: '1',
                value: '+------+++-----+----+++++++---+---++++++++-----------++++-----------++++-----------++++-----------++++-----------++++----------++++----++-----++++----++-----++++----+------++++-----------++++-----------++++----+-----+++++-------+++++++-------+++++++++++-----++++++++++++--------+++++--'
            }, {
                key: '2',
                value: '++-++++++++----+++++++++++++--++++++++++++++-+++++-----++++++++--------+++++++--------+++++++--------+++++++--------+++++++-------++++++++------+++++-+++----+++++++-+-----+++++++------++++++++------+++++++-------++++++++------++++++++++-----+++++++++++++-'
            }, {
                key: '2',
                value: '+----++++++++--++--+++++++++++++-+++++++++++++++++++-----+++++-++++------++++-++++------+++--+++++-----++----+++++++++++----++++++++++++--+++++++++++++-+++++----++++++++++-----+++++-++++-------+++-++++------+++--+++++-----+++---++++++++++++----+++++++++++------++++++++-'
            }, {
                key: '2',
                value: '---++++++++-----++++++++++----+++++++++++----------+++++----------++++----------++++----------++++----------+++++--------++++++------++++++++-----++++++------+++++++------+++++++-----++++++++-----+++++++-------++++++++++++--+++++++++++++----++++++++++-'
            }, {
                key: '2',
                value: '----++++++-------++++++++++----+++++++++++----++---+++++----------++++--------++++++------+++++++------+++++++-----++++++++-----+++++++------++++++++------++++++++++++---++++++++++++--------+++++-'
            }, {
                key: '3',
                value: '+--++++++------+-+++++++++-------+++++++++--+--------+++++-----------++++-----------++++--+-------++++---+--++++++++----+-+++++++------+--+++++++-----+------++++----+-------++++----++-----++++----+++++++++++-----+++++++++-------+++++++-----'
            }, {
                key: '3',
                value: '----+++++++------++++++++++-----++++++++++----------++++-----+++++++++----+++++++++------++++++++----------+++++----------++++-++--------+++++++------++++++++++++++++++-++++++++++++----+++++++++--'
            }, {
                key: '3',
                value: '+--++++++----+-+++++++++--+--+++++++++-+-------+++++---------++++---------++++--------++++----++++++++--+-+++++++----+--+++++++---+------++++--+-------++++-+--------+++-+--------+++--++-----++++--+++++++++++---+++++++++-----+++++++---'
            }, {
                key: '4',
                value: '------++++++--------+++++++------++++++++-----+++++++++----++++-+++++---++++--++++---++++---++++--++++----++++--+++-----++++--++------++++--++++++++++++--++++++++++++++-+++++++++++++-------++++++--------++++----------++++---'
            }, {
                key: '4',
                value: '---------+++++--------+++++++------++++++++-----+++++++++----++++-+++++---++++--+++++--+++++--++++--+++++---++++--++++----++++-+++++----++++-+++--++--++++-+++++++++++++++++++++++++++----++++++++++---------+++++---------++++----------++++-'
            }, {
                key: '4',
                value: '+-------+++++++------++++++++----+++++++++---++++++++++--++++++++++--++++--+++++-++++---+++--++++----+++-++++-----+++++++------+++++++++++++++++++++++++++++++-+++++++++++--------+++++--------++++---------++++'
            }, {
                key: '4',
                value: '-------++++---------+++++--------+++++++------++++++++-----++--++++++--+++---++++---+++----++++---++----+++++---+-----++++----++++++++++----+++++++++++---++++++++++++-+------+++++---------++++---------++++----------+++++---------++++-----'
            }, {
                key: '5',
                value: '----++++++------++++++++++---++++++++++---++++---+++---++++---------++++++-------+++++++++-----+++++++++--------+++++-+++------+++-++++++++++++--+++++++++++---+++++++++-'
            }, {
                key: '5',
                value: '---+++++++++++--+--++++++++++++-++-+++++++++++--++-++++---------++-++++---------++-+++++++++----++-+++++++++++--++--+++++++++++-+---------+++++-+----------++++------------+++++------------++++-----------++++-----------+++++---++++---++++++---++++++++++++--+-+++++++++++---------+++++-----'
            }, {
                key: '5',
                value: '+----+++++++------++++++++++----++++++++++----++++--+-++----++++--+---+--+++++++++--++-++++++++++-++--++++++++++++----+---++++++---------+++++----------+++----------+++--+++-----++++--++++++++++++---+++++++++++-----+++++++--'
            }, {
                key: '5',
                value: '+--+++++------+-+++++++++++-+-+++++++++++-+-++----++++--+-++++----------+++++++--------+++++++---------++++++----------++++-----------++++----------++++----------++++-+-------++++--+-++++++++++----+++++++++------+++++++-----'
            }, {
                key: '5',
                value: '---+++++++------+++++++++++-+-+++++++++++++-++++----+++---++++---------++++++++------++++++++++-----++++++++++----------+++++----------++++-----------++++----------++++----------++++---------++++-+++-----+++++-+++++++++++++-++++++++++++-----+++++++----'
            }, {
                key: '5',
                value: '++--+++++++++--++-+++++++++++----+++++++++++---++++-----------++++-----------+++++++++------++++++++++---+--++++++++++--+--------+++++-++--------++++-++---------+++++----------+++++---------++++++---------++++-++++-----+++++-+++++++++++++---+++++++++++-++----++++++---++'
            }, {
                key: '6',
                value: '------+++++------+++++++++---++++++++++--+++++---+++-+++++--------++++--------+++++--+++---++++++++++++-++++++++++++++++++---+++++++++-----++++++++------+++++++------+++++++-----++++-++++----++++--+++++++++++---+++++++++-----++++++---'
            }, {
                key: '6',
                value: '---++++++++++----++++++++++++--+++++++++++++-+++++-------+--++++-----------++++-+++-------+++++++++++----++++++++++++---++++----+++++--++++-----+++++-++++------++++-+++-------++++++++-------+++++++++-----++++---++++++++++++----++++++++++------++++++++----'
            }, {
                key: '6',
                value: '------++++-------++++++++---+++++++++++-+++++++++++++++++------+-++++---------++++++++++---+++++++++++++++++++++++++++++-----++++++++------+++++++------+++++++------+++++++------++++++++----+++++-++++++++++++--+++++++++++----+++++--++'
            }, {
                key: '6',
                value: '-------++++++--------++++++++++-----++++++++++++---+++++-----++---++++------------+++++----------+++++++++++-----++++++++++++----+++++++++++++--++++++----+++++-+++++------++++-+++++-------++++-++++-------++++-++++------++++---++++----+++++----++++++++++++-----+++++++++---------++++++----'
            }, {
                key: '6',
                value: '-----+++++---------++++++++++-----++++++++++++---+++++----++++--+++++--------+--++++-----------++++++++++-------+++++++++++-----++++++++++++----++++----+++++---+++------++++---+++-------++++--+++-------+++++-+++------++++++-++++-----++++----++++++++++++--+--++++++++++-------+++++++------'
            }, {
                key: '6',
                value: '------+++++++-----++++++++++---+++++++++++--+++++-----++-++++----------++++---------+++++++++++---++++++++++++--+++++++++++++-+++++----+++++++++------++++++++-------+++++++-------+++++++------++++-++++----+++++--++++++++++++---+++++++++-+-----++++++--+'
            }, {
                key: '6',
                value: '------++++++----++++++++---+++++++++--+++++------++++--------++++-------+++++++++++-+++++++++++++++++++++++++++++----+++++++------++++++-------+++++-------+++++------++-++++----+++--++++++++++---+++++++++-----++++++-'
            }, {
                key: '7',
                value: '+++++++-----++++++++++++-+++++++++++-------+++++--------++++-------+++++-------++++-------+++++------+++++-------++++-------+++++------+++++-------++++-------+++++------+++++-------++++-------+++++-------++++--------'
            }, {
                key: '7',
                value: '--++++++-----+++++++++++--++++++++++--------++++----++++-------++++-------++++-------++++--------++++-------++++--------'
            }, {
                key: '7',
                value: '++-+++++++++--++-++++++++++-++--++++++++++++--------+++-+---------+++---------++++--+------+++----++----++++----++----+++-----++---+++------++--+++-------++-++++-------++-+++--------+-++++----------++++--------'
            }, {
                key: '7',
                value: '--++++++------+++++++++++---+++++++++++-------++++++--------+++++--------+++++------++++--------++++------++++--------++++---------++++--------++++---------'
            }, {
                key: '8',
                value: '-----+++++++-----+++++++++----+++++++++---+++++--++++--++++---++++--+++++-+++++---++++++++++----+++++++-+---++++++++-+--+++++++++++-++++--++++++-++++---++++-++++-----+++-+++++----+++--+++++--++++--+++++++++++---++++++++++------++++---'
            }, {
                key: '8',
                value: '+----++++++++--++--+++++++++++++-+++++++++++++++++++-----+++++-++++------++++-++++------+++--+++++-----++----+++++++++++----++++++++++++--+++++++++++++-+++++----++++++++++-----+++++-++++-------+++-++++------+++--+++++-----+++---++++++++++++----+++++++++++------++++++++-'
            }, {
                key: '8',
                value: '-++++++++---+++++++++++-+++++++++++++++-----+++++++------++++++------+++++++-----++++++++++++++++++++++++++-+++++++++++-+++----++++++++-----+++++++------+++++------++++++++----+++++++++++++++++++++++++++---++++++++--'
            }, {
                key: '8',
                value: '----++++++++---+-++++++++++++-+++++++++++++++++++++-----+++++++++-------+++++++++------++++++++++-----++++++++++++++++++--++++++++++++--+++++++++++++--++++-----+++++-++++------++++-+++++------+++-+++++-----++++-++++++---+++++--+++++++++++++---+++++++++++------+++++++---'
            }, {
                key: '8',
                value: '-----++++++-----++++++++---+++++++++--+++++--+++--+++++--+++---++++--+++---+++++-+++----+++++++-----++++++----++++++++++-++++--+++++-++++---+++++++++----++++++++----+++-+++++---+++-+++++++++++--++++++++++----++++++--'
            }, {
                key: '8',
                value: '-----+++++----+---++++++++++++-+++++++++++++++++++--++++++++++------++++++++-------+++-++++------+++--+++++--+++++--+++++++++++++++++++++++-++++++---++++++++++------++++++++-------++-++++-------++-+++++-----+++--++++++++++++---+++++++++++----++++++++++'
            }, {
                key: '8',
                value: '--++++++++++--++++++++++++++++++++++++++++++-----+++++++-------++++++-------++-+++++----+++--+++++++++++-+++++++++++-+++++++++++++++++------+++++++------++++++-------+++++++------++++++++----++++-++++++++++++--+++++++++++---+-++++++--'
            }, {
                key: '9',
                value: '------++++++------++++++++----+++++++++---+++++----++--++++------+-++++-------++++++-------++-++++------++-+++++----++---++++++++++----+++++++++-----+++++++---++-----+++---++++++++++----+++++++++-----++++++--'
            }, {
                key: '9',
                value: '----++++-----+-++++++++---+++++++++++--+++++---++++-++++-----++++++++-----++++++++------+++++++-----+++++++++----+++++++++++++++++-+++++++-++++---+++++-++++--------++++---------++++-++----+++++--+++++++++++---+++++++++-----++++++-----'
            }, {
                key: '9',
                value: '----++++------++++++++---++++++++++-+++++---++++++++-----+++++++-----+++++++------++++++-----++++++++----+++++++++++++++-+++++++-+++---++++--+++--------++++--------++++++----++++++++++++++++++-+++++++++-+--++++++----'
            }, {
                key: '9',
                value: '-----++++++--------++++++++++-----++++++++++++----++++-----++++--+++++------+++--++++-------++++-++++-------++++-+++++------++++--+++++----++++++++++++++++++++++--+++++++++++++------++++++++++-----------++++-----------+++++---+++----+++++----+++++++++++------+++++++++---------+++++------'
            }, {
                key: '9',
                value: '++----++++++---++--++++++++++-++-++++++++++++++-++++-----++++-+++++------+++-++++-------++--++++-------++--+++++------++---+++++----+++----+++++++++++-----++++++++++-------+++++++++-----------+++-----------++++---+++----+++++---+++++++++++-----+++++++++--------+++++----'
            }, {
                key: '1',
                value: '++++--++++++--++--++++++++------+++++++---------++++---------+++++-------++++-++------++++-+++-----++++-+++-----++++-++++----++++-++++----++++++++-----++++++++-----++++-++-----+++++-+------++++------++++++++-----+++++++++-----++++++++'
            }, {
                key: '1',
                value: '-----++++++-----++++++++-----+++++++--------++++--------++++--------++++--------++++--------++++--------++++--------++++--------++++--------++++-------++++--------++++-++--++-++++-++++++++++++++--++++++++-----+++++++'
            }, {
                key: '1',
                value: '-----++++++-------++++++++-------+++++++----------++++----------++++----------++++----------++++---------++++----------++++----------++++---++-----++++---+++----++++---+++----++++---+++---+++++---------++++-------+++++++-------++++++++++-----++++++++++'
            }, {
                key: '4',
                value: '+-----+++--------++++++------+++++++----++++++++---+++++++++--++++-+++++-++++--++++-++++---++++-+++----++++-++-----++++-+------++++-+++++++++++-++++++++++++++++++++++++------++++++------++++--------++++--'
            }, {
                key: '0',
                value: '---+++++++-----+++++++++---+++++++++++--++++--+-++++++++-----++++++++-----++++++++----++++++++-----++++++++------+++++++------+++++++------+++++++------+++++++-----++++-++++---+++++--++++++++++----++++++++------++++++----'
            }, {
                key: '3',
                value: '+-++++++-------+++++++++++-----+++++++++++----------++++++-----------+++++-----------++++-----------++++----------++++-----++++++++++----++++++++++--+---++++++++----------++++++-----------++++------------++++--+-------+++++--++++++++++++---+++++++++++-----+++++++++-----'
            }, {
                key: '1',
                value: '++----++++++---+++--++++++++--++++--+++++++--++++-----++++--++++-----++++--++++-----++++--++++-----++++--++++-----++++--++++-----++++--++++-----++++--+++------++++--+++------++++--+++-----++++---++------++++---+----++-++++-------+++++++++++-----++++++++++-------++++++++'
            }, {
                key: '9',
                value: '+-++++++-------++++++++++-----+++++++++++----++++----++++---+++------++++--++-------++++--++-------++++--+++------++++--++++----+++++--+++++++++++++--+++++++++++++----+++++++++++----------++++-----------++++---+-----+++++----++++++++++-----+++++++++-------++++++--------'
            }, {
                key: '7',
                value: '--++++++------+++++++++++++++-+++++++++++++-------+++++++---------+++++---------+++++--------++++++-------+++++-+-------++++--+------+++++--------+++++--------+++++---------+++++--------+++++--------+++++---------+++++--------+++++-------'
            }, {
                key: '0',
                value: '++--+++++------+++++++++++-----+++++++++++----++++---+++++--++++------++++-++++------++++-+++-------++++-+++-------++++-+++-------++++-+++-------++++-+++-------++++-+++-------++++-+++------++++--+++------++++--++++----+++++---+++++++++++-----+++++++++-------+++++++-----'
            }, {
                key: '7',
                value: '+++++++++++--+++++++++++--++++++++++----++++------++++-------++++--------++++-------++++--------'
            }, {
                key: '3',
                value: '---++++++-------+++++++++------+++++++++----------+++++----------++++----------++++---------++++-+---++++++++--+--+++++++----+---+++++++---+-------++++--+--------++++-+---------+++-+---------+++-+-++-----++++-+-+++++++++++----+++++++++------+++++++----'
            }, {
                key: '3',
                value: '++----++++----------+++++++++------++++++++++----------++++++-----------+++++----+++++++++++---++++++++++++----++++++++-+--------+++++++----------++++++++-------++++++++++++++++++++++++++++++++++----++++++++++-'
            }, {
                key: '2',
                value: '----+++++++-----+--++++++++++---++-+++++++++++--++--------+++++-++---------++++-++---------++++-+----------+++++-----------++++-----------+++++----------+++++---------+++++++--+-----+++++++---+---++++++++-------+++++++--------++++++---------++++++++++-------+++++++++++------+++++++++++--'
            }, {
                key: '7',
                value: '--++++++++------+++++++++++++-+-++++++++++++++---------++++++---------++++-+--------+++++-+-------+++++--+-------++++---+------+++++---------+++++----------++++----------+++++---------+++++----------+++++---------+++++---------+++++----------+++++--------'
            }, {
                key: '5',
                value: '---+++++-------+++++++++++--+++++++++++--++++--+++++--++++-------+-+++++------+-+++++++++----++++++++++--------++++++---------++++++-------+++++++++++++++++-+++++++++++---+++++++++--'
            }, {
                key: '4',
                value: '-------++++++----------++++----------++++++--------+++++++-------++++++++------+++-+++++-----+++--++++-----+++---++++----++-----++++---++------++++---++++++++++++----++++++++++++----++++++++++++---------+++++---------++++-----------++++---+-------++++----'
            }, {
                key: '2',
                value: '+----++++++----+---++++++++++-+---++++++++++++----++---++++++-----------++++-----------+++++---------++++++-------++++++-------+++++++-------+++++++------++++++++------+++++++-------++++++++-------++++++++++++----++++++++++++--------++++++-'
            }, {
                key: '7',
                value: '---+++++++++++----+++++++++++-----++++++++++----------+++++---------+++++--------++++++--------++++++-------++++++-------+++++++-------++++++-------+++++---------++++---------+++++---------++++---------+++++--------+++++---------++++-----'
            }, {
                key: '7',
                value: '++++++----------+++++++++++++++-+++++++++++++++++++--+++++++++++++---------+++++++---------++++-+---------+++++-+---------++++-----------+++++----------+++++-----------+++++----------+++++-----------++++-----------+++++-----------++++-----------+++++----------+++++-----------++++--------'
            }, {
                key: '5',
                value: '-+++++++++++-+++++++++++-+++++++++++-++++--------++++--------+++++++++---+++++++++++--++++++++++--------++++++++---+++++++++++++++++-++++++++++-----+++++---'
            }
        ];


        let str = this.xyArray2Str(char);
        // 循环比较，得到相似度数组
        for (const key in dict) {
            // 记住相似度
            similer.push(this.compareSimlerByStr(str, dict[key]['value']));
        }
        // 取得相似度最大值及其索引
        for (let i = 0; i < similer.length; i++) {
            if (similer[i] > maxSimiler) {
                maxSimiler = similer[i];
                charIndex = i;
            }
        }
        // 返回识别结果
        // console.info(dict[charIndex]['key']);
        return dict[charIndex]['key'];
    }

    // 打印二值到控制台
    print2log(xyArray) {
        console.log('打印图形:\n');
        let str = '';
        for (let y = 0; y < xyArray.length; y++) {
            for (let x = 0; x < xyArray[0].length; x++) {
                if (xyArray[y][x] != 0) {
                    str += '+';
                } else {
                    str += '-';
                }
            }
            str += "\n";
        }
        console.log(str);
    }

    // 8领域降噪 80*34
    noiseReductionBy8position(xyArray) {
        for (let y = 1; y < xyArray.length - 1; y++) {
            for (let x = 0; x < xyArray[0].length - 1; x++) {
                let blackPoints = 0;
                if (xyArray[y + 1][x] == 1) blackPoints++;
                if (xyArray[y][x + 1] == 1) blackPoints++;
                if (xyArray[y - 1][x] == 1) blackPoints++;
                if (xyArray[y][x - 1] == 1) blackPoints++;
                if (xyArray[y + 1][x + 1] == 1) blackPoints++;
                if (xyArray[y + 1][x - 1] == 1) blackPoints++;
                if (xyArray[y - 1][x - 1] == 1) blackPoints++;
                if (xyArray[y - 1][x + 1] == 1) blackPoints++;
                if (blackPoints < 4) xyArray[y][x] = 0;
            }

        }
        return xyArray;
    }

    // 连通域降噪
    noiseReductionByLinkedArea(xyArray) {
        return xyArray;
    }

    // 去除干扰线
    reductionLine(xyArray) {
        for (let height = 0, heightLength = xyArray.length; height < heightLength; height++) {
            for (let width = 0, widthLength = xyArray[0].length; width < widthLength; width++) {
                if (xyArray[height][width] > 0) {
                    // console.log('黑点', height + ',' + width);
                    let count = this.countLinkedPointsInLine(height, width, xyArray, 0);
                    // console.log('连通点(' + height + ',' + width + ')的横线上的点有' + count + '个\n');
                    // 一条线上连续11个点，就判断为干扰线
                    if (count < 11) {
                        for (let index = width; index < width + count; index++) {
                            xyArray[height][index] = 0;
                        }
                    }
                    // break;
                } else {
                    // 
                }
            }
            // break;
        }
        return xyArray;
    }

    // 统计水平线上互相连通的点的个数
    countLinkedPointsInLine(height, width, xyArray, count) {
        for (let index = width; index < xyArray[height].length; index++) {
            if (xyArray[height][index] > 0) {
                count++;
            } else {
                break;
            }
        }
        return count;
    }

    // 统计图像里1占0和1总数的占比
    countOneRace(char) {
        // console.log(char);
        let counter = 0,
            all = char.length * char[0].length;
        for (let i = 0; i < char.length; i++) {
            for (let j = 0; j < char[i].length; j++) {
                counter += char[i][j];
            }
        }
        let info = {
            one: counter,
            all: all,
            race: (counter / all),
        }
        return info.race;
        // return `数字是：，1占：${info.one}，总数是：${info.all}，比率是：${info.race}`;
    }

    // 自动打码，需要修改指定的验证码图片才能使用
    dama(img) {
        const Image = img,
            Canvas = document.createElement('CANVAS');

        // 获取验证码图像尺寸
        let ImageWidth = Image.width,
            ImageHeight = Image.height,
            // 初始化画布内容
            canvasContext = Canvas.getContext("2d");

        // 绘制验证码内容到画布中
        canvasContext.drawImage(Image, 0, 0, ImageWidth, ImageHeight);

        // 获取图像数据
        let ImageData = canvasContext.getImageData(0, 0, ImageWidth, ImageHeight);
        // 二值化
        let hexData = this.toHex(ImageData.data, ImageData.data);
        // 二维化
        let xyArray = this.hex2Xy(hexData, ImageWidth, ImageHeight);
        // 8领域降噪
        xyArray = this.noiseReductionBy8position(xyArray);
        // 腐蚀
        xyArray = this.corrode(xyArray);
        // 膨胀
        xyArray = this.expand(xyArray);
        // 切割
        xyArray = this.speclialSplitY(xyArray);
        // 转置XY坐标
        xyArray = this.Xy2Yx(xyArray);
        // 切割
        xyArray = this.splitY(xyArray);
        // 转置XY坐标
        xyArray = this.Xy2Yx(xyArray);
        // 绘制降噪结果
        hexData = this.xy2Hex(xyArray, canvasContext);

        // 打印图像数据
        // this.print2log(xyArray);
        // 分割字符
        let chars = this.spliceChar(xyArray);

        // 打印分割好的字符数据
        // console.log(chars[3]);

        // 打印字符串特征码到控制台
        // console.log(1, this.xyArray2Str(chars[0]));
        // console.log(2, this.xyArray2Str(chars[1]));
        // console.log(3, this.xyArray2Str(chars[2]));
        // console.log(4, this.xyArray2Str(chars[3]));

        // 打印单个字符到控制台
        // this.print2log(chars[0]);
        // this.print2log(chars[1]);
        // this.print2log(chars[2]);
        // this.print2log(chars[3]);

        // 开始识别
        let char1 = this.identifyChar(chars[0]),
            char2 = this.identifyChar(chars[1]),
            char3 = this.identifyChar(chars[2]),
            char4 = this.identifyChar(chars[3]);
        // console.info('解析结果：', `${char1}${char2}${char3}${char4}`);
        return `${char1}${char2}${char3}${char4}`;
    }

}

(function () {
    // 将原来的网页装在一个容器里，卡死了就只需要刷新这个容器就行，达到永远不刷新页面的效果
    document.body.innerHTML = '';
    document.body.style.width = '100%';
    document.body.style.height = '100%';
    var iframe = document.createElement('IFRAME');
    iframe.style.width = '100%';
    iframe.style.height = '100%';
    document.body.appendChild(iframe);
    iframe.src = window.location.href;
    // 创建显示屏
    var display = document.createElement('DIV');
    display.id = 'display';
    display.style.padding = '2em';
    display.style.width = '60%';
    display.style.minHeight = '200px';
    display.style.outline = '2px solid red';
    display.style.textIndent = '2em';
    display.style.position = 'fixed';
    display.style.top = '50%';
    display.style.left = '20%';
    display.style.zIndex = 9999;
    display.style.color = 'yellow';
    display.style.backgroundColor = 'rgba(0,0,0,0.5)';
    display.innerHTML = '<h3 style="display:block">日志显示：</h3><span>初始化中......</span><br>';
    document.body.appendChild(display);

    function doExamTest() {
        return new Promise(function (resolve, reject) {
            // 获取题目内容
            var examItems = iframe.contentDocument.querySelectorAll('.examItem');
            // 设置30s超时
            var timer = setTimeout(() => {
                reject('做题超时');
            }, 30000);
            // 定义当前题目序号
            var i = 0;
            // 显示刷题记录
            display.innerHTML = display.innerHTML + '第' + localStorage.getItem('index') + '刷<br>';
            var dttimer = setInterval(function () {
                // 聚焦到当前题目的上一题，这一当前题目正处于视野正中间
                if (examItems[i - 1]) {
                    examItems[i - 1].scrollIntoView();
                }
                // 用红线画出当前题目的轮廓
                examItems[i].lastChild.style.outline = '1px solid #F00';
                // console.info('当前正在做' + (i + 1) + "道题！\n");
                display.innerHTML = display.innerHTML + '<span>' + '当前正在做' + (i + 1) + '道题！' + '</span><br>';
                // 开始猜题
                if (examItems[i].firstElementChild.firstElementChild.innerHTML == '单选题') {
                    let inputs = examItems[i].lastElementChild.querySelectorAll('INPUT'),
                        num = Math.floor(Math.random() * inputs.length);
                    // 全部选择C
                    // num = 2;
                    inputs[num].focus();
                    inputs[num].click();
                } else if (examItems[i].firstElementChild.firstElementChild.innerHTML == '多选题') {
                    let inputs = examItems[i].lastElementChild.querySelectorAll('INPUT'),
                        num1 = Math.floor(Math.random() * inputs.length),
                        num2 = Math.floor(Math.random() * inputs.length),
                        num3 = Math.floor(Math.random() * inputs.length);
                    // // 全部选择A,B
                    // num2 = 1,
                    // num1 = 0;
                    inputs[num1].focus();
                    inputs[num1].click();
                    inputs[num2].click();
                    inputs[num3].click();
                } else if (examItems[i].firstElementChild.firstElementChild.innerHTML == '判断题') {
                    let inputs = examItems[i].lastElementChild.querySelectorAll('INPUT'),
                        num = Math.floor(Math.random() * inputs.length);
                    // 全部选错
                    // num = 1;
                    inputs[num].focus();
                    inputs[num].click();
                } else {
                    alert('遇到了未知的题型,暂时无法解决，请手动刷新重新开始答题！');
                    throw Error('遇到了未知的题型,暂时无法解决，请手动刷新重新开始答题！');
                }
                // 取消红框
                if (i > 0) {
                    examItems[i - 1].lastChild.style.outline = 'none';
                }
                i++;
                // 完了，提交
                if (examItems[i] === undefined) {
                    // 结束答题任务
                    window.clearInterval(dttimer);
                    // console.log('timer', typeof timer);
                    window.clearTimeout(timer);
                    // 答题结束，准备提交
                    localStorage.setItem('index', parseInt(localStorage.getItem('index')) + 1);
                    display.innerHTML = display.innerHTML + '<span>' + '答题完成，0.5秒后提交！' + '</span><br>';
                    // console.info("答题完成，0.5秒后提交\n");
                    resolve('OK');
                }
                // 继续答下一题
            }, 1000);
        })
    }

    function isExamLoad() {
        return new Promise(function (resolve, reject) {
            var outTimer = setTimeout(() => {
                reject('overTime');
            }, 15000)
            var timer = setInterval(() => {
                var examItems = iframe.contentDocument.querySelectorAll('.examItem');
                if (examItems.length > 0) {
                    window.clearInterval(timer);
                    window.clearTimeout(outTimer);
                    resolve('OK');
                }
            }, 500);
        });
    }

    function isSubmitEnd() {
        return new Promise(function (resolve, reject) {
            var outTimer = setTimeout(() => {
                reject('timeOver');
            }, 15000);
            var timer = setInterval(() => {
                if (iframe.contentDocument.querySelectorAll('button').length > 1) {
                    window.clearInterval(timer);
                    window.clearTimeout(outTimer);
                    resolve('OK');
                }
            }, 500);
        });
    }


    function fillVerifyCode(isFirstSubmit) {
        // 点击了提交按钮，但是没有提交成功，检测是否跳出验证码了
        var verifyCodeImg = img = iframe.contentDocument.querySelector(".codeImgTj");
        if (verifyCodeImg !== null) {
            verifyCodeImg = verifyCodeImg.querySelector("img");
            // 重置验证码图片大小为合适的尺寸
            verifyCodeImg.style['width'] = '80px';
            // 自动识别验证码
            if (typeof ATDM === "undefined") {
                var ATDM = new AutoDaMa();
            }
            // 第一次提交
            if (!isFirstSubmit) {
                // 不需要刷新验证码，直接识别，否则先刷新验证码再识别
                verifyCodeImg.click();
            }
            // 等待可能需要加载验证码的情况，1秒后再识别验证码
            setTimeout(function () {
                var verifyCode = ATDM.dama(verifyCodeImg),
                    verifyCodeInput = iframe.contentDocument.querySelector(".el-input__inner");
                // 自定义输入验证码的函数，触发输入操作
                if (window.inputValue === undefined) {
                    window.inputValue = function (dom, st) {
                        var evt = new InputEvent('input', {
                            inputType: 'insertText',
                            data: st,
                            dataTransfer: null,
                            isComposing: false
                        });
                        dom.value = st;
                        dom.dispatchEvent(evt);
                    }
                }
                // 输入验证码
                window.inputValue(verifyCodeInput, verifyCode);
                // 输入验证码完毕，0.5秒之后点击提交按钮
                setTimeout(function () {
                    // 点击提交按钮
                    iframe.contentDocument.querySelector(".buttonBox").querySelector("BUTTON").click();
                }, 100);
            }, 1000);
        }else{
            iframe.contentDocument.querySelector('.tijiao').firstElementChild.click();
        }
    }

    function submitVerifyCode() {
        return new Promise(function (resolve, reject) {
            var outTimer = setTimeout(() => {
                reject('timeOver');
            }, 30000)
            var isFirstSubmit = true;
            var timer = setInterval(() => {
                if (iframe.contentDocument.querySelector(".analysis") !== null) {
                    window.clearInterval(timer);
                    window.clearTimeout(outTimer);
                    resolve('OK');
                }else{
                    fillVerifyCode(isFirstSubmit);
                    isFirstSubmit = false;
                }
            }, 2000);
        })
    }

    iframe.onload = function () {
        if (!localStorage.getItem('index')) {
            localStorage.setItem('index', 0);
        };
        isExamLoad().then(() => {
            return doExamTest();
        }).then(() => {
            iframe.contentDocument.querySelector('.tijiao').firstElementChild.click();
            // return isSubmitEnd();
            return submitVerifyCode();
        }).then((state) => {
            // console.log(state);
            // console.log('一轮答题完成！');
            display.innerHTML = '<h3 style="display:block">日志显示：</h3><span>初始化中......</span><br>';
            // 更新计数器
            localStorage.setItem('count', parseInt(localStorage.getItem('count')) + 1);
            // 返回答题界面
            setTimeout(() => {
                iframe.src = window.location.href;
            }, 1000);
        }).catch((err) => {
            console.error(err);
            display.innerHTML = '<h3 style="display:block">日志显示：</h3><span>初始化中......</span><br>';
            // 更新计数器
            localStorage.setItem('count', parseInt(localStorage.getItem('count')) + 1);
            // 返回答题界面
            iframe.src = window.location.href;
        });
    }
})();
